{
  "description": "Auto-detecting Vercel deployment monitor with zero configuration required. Automatically discovers your Vercel auth token from CLI config (macOS: ~/Library/Application Support/com.vercel.cli/auth.json, Linux: ~/.config/vercel/auth.json, Windows: %APPDATA%/vercel/auth.json) and project ID from .vercel/project.json. Shows real-time deployment status, build state icons, deployment URL preview, and time elapsed since last deployment. Falls back gracefully to environment variables VERCEL_TOKEN and VERCEL_PROJECT_ID if auto-detection fails. Works across all platforms without any manual setup.",
  "statusLine": {
    "type": "command",
    "command": "bash -c 'input=$(cat); DIR=$(echo \"$input\" | jq -r \".workspace.current_dir\"); if [[ \"$OSTYPE\" == \"darwin\"* ]]; then AUTH_FILE=\"$HOME/Library/Application Support/com.vercel.cli/auth.json\"; elif [[ \"$OSTYPE\" == \"linux-gnu\"* ]]; then AUTH_FILE=\"$HOME/.config/vercel/auth.json\"; elif [[ \"$OSTYPE\" == \"msys\" || \"$OSTYPE\" == \"cygwin\" ]]; then AUTH_FILE=\"$APPDATA/vercel/auth.json\"; else AUTH_FILE=\"$HOME/.config/vercel/auth.json\"; fi; PROJECT_FILE=\".vercel/project.json\"; if [ -f \"$AUTH_FILE\" ]; then TOKEN=$(jq -r \".token // empty\" \"$AUTH_FILE\" 2>/dev/null); else TOKEN=\"$VERCEL_TOKEN\"; fi; if [ -f \"$PROJECT_FILE\" ]; then PROJECT=$(jq -r \".projectId // empty\" \"$PROJECT_FILE\" 2>/dev/null); else PROJECT=\"$VERCEL_PROJECT_ID\"; fi; if [ -n \"$TOKEN\" ] && [ -n \"$PROJECT\" ] && [ \"$TOKEN\" != \"null\" ] && [ \"$PROJECT\" != \"null\" ]; then DEPLOY_DATA=$(curl -s -H \"Authorization: Bearer $TOKEN\" \"https://api.vercel.com/v6/deployments?projectId=$PROJECT&limit=1\" 2>/dev/null); if [ -n \"$DEPLOY_DATA\" ] && [ \"$DEPLOY_DATA\" != \"null\" ]; then STATE=$(echo \"$DEPLOY_DATA\" | jq -r \".deployments[0].state // empty\"); URL=$(echo \"$DEPLOY_DATA\" | jq -r \".deployments[0].url // empty\" | cut -c1-20); CREATED=$(echo \"$DEPLOY_DATA\" | jq -r \".deployments[0].created // empty\"); if [ -n \"$CREATED\" ] && [ \"$CREATED\" != \"null\" ]; then AGO=$(( ($(date +%s) - $CREATED/1000) / 60 )); TIME_AGO=\"${AGO}m ago\"; else TIME_AGO=\"unknown\"; fi; case \"$STATE\" in READY) STATUS_ICON=\"‚úÖ\";; BUILDING) STATUS_ICON=\"üîÑ\";; QUEUED) STATUS_ICON=\"‚è≥\";; ERROR) STATUS_ICON=\"‚ùå\";; *) STATUS_ICON=\"‚ùì\";; esac; else STATE=\"API error\"; URL=\"\"; TIME_AGO=\"\"; STATUS_ICON=\"‚ùå\"; fi; else STATE=\"config missing\"; URL=\"\"; TIME_AGO=\"\"; STATUS_ICON=\"‚ö†Ô∏è\"; fi; echo \"‚ñ≤ Vercel üöÄ $STATUS_ICON $STATE | üåê $URL | ‚è∞ $TIME_AGO | üìÅ ${DIR##*/}\"'"
  }
}